trigger:
  branches:
    include:
      - "*"
  paths:
    include:
      - src
  tags:
    include:
      - "*"

pool: Default

variables:
  buildConfiguration: 'Debug'
  workDir: '$(Build.SourcesDirectory)\src'
  testResultsDir: '$(workDir)\Libraries\SimpleAVSGeneratorCore.Tests\TestResults'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 8.0.100'
  inputs:
    version: 8.0.100
    performMultiLevelLookup: true

- task: CMake@1
  displayName: 'Run CMake'
  inputs:
    cmakeArgs: -S . -B "build" -DCI_BUILD=ON
    workingDirectory: $(Build.SourcesDirectory)

- task: DotNetCoreCLI@2
  displayName: 'Restore Project Dependencies'
  inputs:
    command: restore
    arguments: -c $(buildConfiguration)
    projects: '$(Build.SourcesDirectory)/src/SimpleAVSGenerator.sln'

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud for Analysis'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'shaylenreddy42'
    scannerMode: 'MSBuild'
    projectKey: 'ShaylenReddy42_Simple-AVS-Generator'
    projectName: 'Simple-AVS-Generator'
    extraProperties: |
      sonar.cs.vstest.reportsPaths=$(testResultsDir)/*.trx
      sonar.cs.opencover.reportsPaths=$(testResultsDir)\**\*.xml'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: build
    arguments: -c $(buildConfiguration)
    projects: '$(Build.SourcesDirectory)/src/SimpleAVSGenerator.sln'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
   command: custom
   custom: test
   arguments: -c $(buildConfiguration) --results-directory "$(testResultsDir)" --collect:"XPlat Code Coverage" --logger trx
   workingDirectory: $(workDir)

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '*.trx'
    searchFolder: $(testResultsDir)

- task: PublishCodeCoverageResults@2
  displayName: 'Publish HTML Code Coverage Report'
  inputs:
    summaryFileLocation: '$(testResultsDir)\*\coverage.cobertura.xml'

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud Analysis'

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'
    
- task: BuildQualityChecks@8
  displayName: 'Build Quality Checks'
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    coverageThreshold: '90'

- script: dotnet publish -c Release -r win-x64 --self-contained -o "..\..\..\publish\winforms"
  displayName: 'Publish the Final Executable'
  workingDirectory: '$(workDir)\Frontends\SimpleAVSGenerator.WinForms'

- task: BatchScript@1
  displayName: 'Create Installer'
  inputs:
    filename: '$(Build.SourcesDirectory)\scripts\create-installer.cmd'

- task: CopyFiles@2
  displayName: 'Copy Installer to the Artifact Staging Directory'
  inputs:
    Contents: '$(Build.SourcesDirectory)\installer\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  
- task: GitHubRelease@1
  displayName: 'Create a New GitHub Release'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  inputs:
    gitHubConnection: 'ShaylenReddy42_OAuth'
    repositoryName: '$(Build.Repository.Name)'
    action: create
    tagSource: userSpecifiedTag
    tag: $(Build.SourceBranchName)
    title: 'Release v$(Build.SourceBranchName)'
    releaseNotesSource: filePath
    releaseNotesFilePath: '$(Build.SourcesDirectory)/docs/releases/v$(Build.SourceBranchName).md'
    assets: '$(Build.ArtifactStagingDirectory)/*'
    addChangeLog: false
