trigger:
- '*'

pool: Default

variables:
  buildConfiguration: 'Debug'
  workDir: $(Build.SourcesDirectory)
  testResultsDir: $(workDir)\SimpleAVSGenerator.Tests\TestResults

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK'
  inputs:
    version: 6.0.202
    performMultiLevelLookup: true

- task: DotNetCoreCLI@2
  displayName: 'Restore Project Dependencies'
  inputs:
    command: restore
    arguments: -c $(buildConfiguration)
    workingDirectory: $(workDir)
    
- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud for Analysis'
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'shaylenreddy42'
    scannerMode: 'MSBuild'
    projectKey: 'ShaylenReddy42_Simple-AVS-Generator'
    projectName: 'Simple-AVS-Generator'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: build
    arguments: -c $(buildConfiguration)
    workingDirectory: $(workDir)

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
   command: custom
   custom: test
   arguments: -c $(buildConfiguration) --results-directory "$(testResultsDir)" --collect:"XPlat Code Coverage" --logger trx
   workingDirectory: $(workDir)

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '*.trx'
    searchFolder: $(testResultsDir)

- task: PublishCodeCoverageResults@1
  displayName: 'Publish HTML Code Coverage Report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(testResultsDir)\*\coverage.cobertura.xml'

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud Analysis'

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'
    
- task: BuildQualityChecks@8
  displayName: 'Build Quality Checks'
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    coverageThreshold: '90'

- task: CMake@1
  displayName: 'Run CMake'
  inputs:
    workingDirectory: $(workDir)
    cmakeArgs: -S . -B "$(workDir)\build" -DCI_BUILD=ON

- script: CALL dotnet-publish.cmd
  displayName: 'Publish the Final Executable'

- task: ArchiveFiles@2
  displayName: 'Archive Build Artifacts'
  inputs:
    rootFolderOrFile: '$(workDir)\publish'
    includeRootFolder: false
    archiveType: zip
    archiveFile: '$(Build.ArtifactStagingDirectory)\Simple AVS Generator.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish the Build Artifact'
  inputs:
    ArtifactName: 'Simple AVS Generator'